#Hamiltonian cycles are a graph theoretic concept. A HC touches every other vertex exactly once,
    and ends at the vertex where it began. The traveling salesman problem is an attempt to find
    the shortest HC. The traveling salesman problem is an NP-Hard problem.


    **-graph represented by a matrix will be along the diagonal only, with the rest as zeros. 
    -will need to maintain the original matrix in addition to the working one. 

2. algo? utilize preexisting ones? make new one?
    -use greedy algorithm, but iterate to optimize? if greedy algo is used, data must be stored as vertices--unless begin with edge rather than vertex??
    -begin with lowest weighted edge?
    -begin with hightest-connected vertex?
    --how to avoid halting if two vertices have the same number of edges?
    -how to represent the final cycle? as a string?
    -- ** will highly depend upon the format of graph storage
   
3. what if no cycle exists? return "no HC exists"
    -do we want the next best thing?
    
4. further down the road:
    -how to iterate in order to optimize, if several HC's exist within a graph?
    -if no HC exists, create option to find the next best thing
    -create GUI to make inputting data easier
    -build in relevant theorems to weed out graphs which don't contain HC's.


notes as i go: 
    igraph seems to be the best option, but **igraph has a built in duplicate edge deletor, but (4,1) is not the same as (1,4) to the computer.**



